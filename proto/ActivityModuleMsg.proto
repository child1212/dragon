syntax = "proto2";
package com.common.msg;

import "ItemModuleMsg.proto";
import "ActivityGiftModuleMsg.proto";

enum ActivityModuleMsgSubCommand {
	// 请求活动列表信息
	ACTIVITYMODULEMSG_SUB_ACTIVITYLIST = 12001;
	// 请求单个活动信息
	ACTIVITYMODULEMSG_SUB_ACTIVITYMAXED = 12002;
	// 请求购买满级活动闯关次数
	ACTIVITYMODULEMSG_SUB_ACTIVITYMAXEDBUYSTAGE = 12003;
	// 请求等级活动信息
	ACTIVITYMODULEMSG_SUB_ACTIVITYLEVEL = 12004;
	// 请求开启等级活动
	ACTIVITYMODULEMSG_SUB_ACTIVITYLEVELOPEN = 12005;
	// 请求领取等级活动
	ACTIVITYMODULEMSG_SUB_ACTIVITYLEVELRECEIVE = 12006;
	// 请求水晶球活动信息
	ACTIVITYMODULEMSG_SUB_ACTIVITYCRYSTAL = 12007;
	// 请求开启水晶球活动
	ACTIVITYMODULEMSG_SUB_ACTIVITYCRYSTALOPEN = 12008;
	// 请求关闭水晶球活动
	ACTIVITYMODULEMSG_SUB_ACTIVITYCRYSTALCLOSE = 12009;
	// 请求领取水晶球活动
	ACTIVITYMODULEMSG_SUB_ACTIVITYCRYSTALRECEIVE = 12010;
	// 请求领取水晶球活动建筑大奖
	ACTIVITYMODULEMSG_SUB_ACTIVITYCRYSTALBUILDINGPRIZERECEIVE = 12011;
	// 请求小猪存钱罐信息
	ACTIVITYMODULEMSG_SUB_PIGGYBANKINFO = 12012;
	// 请求开始小猪存钱罐
	ACTIVITYMODULEMSG_SUB_PIGGYBANKSTART = 12013;
	// 请求结束小猪存钱罐
	ACTIVITYMODULEMSG_SUB_PIGGYBANKEND = 12014;
	// 请求领取满级活动奖励
	ACTIVITYMODULEMSG_SUB_ACTIVITYMAXEDRECIEVEREWARD = 12015;
	// 请求巅峰魔法师活动信息
	ACTIVITYMODULEMSG_SUB_TOPMAGICIANINFO = 12016;
	// 请求购买巅峰魔法师闯关次数
	ACTIVITYMODULEMSG_SUB_TOPMAGICIANBUYSTAGE = 12017;
	// 请求领取巅峰魔法师里程碑奖励
	ACTIVITYMODULEMSG_SUB_TOPMAGICIANMILESTONE = 12018;
	// 请求活动排行榜信息
	ACTIVITYMODULEMSG_SUB_RANKINGLIST = 12019;
	// 请求领取排行榜奖励
	ACTIVITYMODULEMSG_SUB_RANKINGLISTREWARD = 12020;
	// 樱花礼包活动信息
	ACTIVITYMODULEMSG_SUB_SAKURAGIFTINFO = 12021;
	// 樱花礼包活动扭蛋机
	ACTIVITYMODULEMSG_SUB_SAKURAGIFTCAPSULETOYS = 12022;
	// 樱花礼包活动樱花兑换道具
	ACTIVITYMODULEMSG_SUB_SAKURAGIFTCONVERTITEM = 12023;
	// 符石加倍活动信息
	ACTIVITYMODULEMSG_SUB_DOUBLERUNESINFO = 12024;
	// 请求开启符石加倍buff
	ACTIVITYMODULEMSG_SUB_DOUBLERUNESOPENBUFF = 12025;
	// 文森特的奖杯活动信息
	ACTIVITYMODULEMSG_SUB_VINCENTSTROPHYINFO = 12026;
	// 开启活动请求（文森特的奖杯，符石活动）
	ACTIVITYMODULEMSG_SUB_OPENNEWACTIVITY = 12027;
	// 樱花礼包引导时奖励樱花
	ACTIVITYMODULEMSG_SUB_SAKURAGIFTREWARD = 12028;

	//*****************************父亲节活动开始[12060 - 12080]*****************************
	// 请求父亲节活动信息
	ACTIVITYMODULEMSG_SUB_ACTIVITYFATHERDAY = 12060;
	// 购买父亲节活动轮数请求
	ACTIVITYMODULEMSG_SUB_ACTIVITYFATHERDAYBUYROUND = 12061;
	// 领取父亲节活动奖励请求
	ACTIVITYMODULEMSG_SUB_ACTIVITYFATHERDAYREWARD = 12062;
	//*****************************父亲节活动结束[12060 - 12080]*****************************

	//*****************************法师通行证活动开始[12081 - 12100]*****************************
	//请求法师通行证信息 此请求开启符合条件的活动并返回活动最新信息
	//ACTIVITYMODULEMSG_SUB_MAGICPASSPORTINFO = 12081;
	//领取法师通行证奖励
	//ACTIVITYMODULEMSG_SUB_MAGICPASSPORTAWARD = 12082;
	//活动结束一段时间内可以请求领取所有奖励
	//ACTIVITYMODULEMSG_SUB_MAGICPASSPORTAWARDALL = 12083;
	
	//*****************************建筑合成活动[12101 - 12120]*****************************

	//*****************************公会建筑活动[12121 - 12140]*****************************

	//*****************************大富翁活动[12141 - 12160]*******************************	

	//*****************************充值建筑扭蛋活动[12161 - 12180]**************************
	
	//*************     注意一下 注释中已经使用的协议不要再使用  此表不能在加本地变量了  lua报错 已移至其他文件中 ********************************
}

// 活动信息
message ActivityMsg{
	// 活动id
	required string activityId = 1;
	// 开启时间
	required int64 startTime = 2;
	// 结束时间
	required int64 endTime = 3;
	// 排行榜结束时间
	optional int64 rankEndTime = 4;
}

// 活动列表请求
message ActivityListRequest {
}
//在活动预热开始前或预热中发送 
message ActivityPreWarmInfos{
	//活动id
	required string activityId = 1;
	// 预热开始时间 (默认结束为活动开启)
	required int64 prewarmStartTime = 2;
	// 预热结束时间
	optional int64 prewarmEndTime = 3;
}

// 活动列表响应
message ActivityListResponse {
	// 活动信息
	repeated ActivityMsg activities = 1;
	// 上次开启活动(1蛋糕、2水晶球)
	optional int32 lastOpenActivityId = 2;
	// 上次开启的活动(1.奖牌 2.符石)
	optional int32 lastVincentOrRunesActivityId = 3;
	// 活动礼包信息
	repeated ActivityGiftInfoResponse giftInfos = 4;
	// 活动预热信息
	repeated ActivityPreWarmInfos prewarmInfos = 5;
}

// 请求单个活动信息
message ActivityMaxedRequest {
	// 活动id
	required string activityId = 1;
}

// 满级活动信息响应
message ActivityMaxedResponse {
	// 活动信息
	required ActivityMsg activity = 1;
	// 可用免费打关次数
	required int32 freeCnt = 2;
	// 已购买打关次数
	required int32 buyCnt = 3;
	// 已获得钥匙数
	required int32 goldNum = 4;
	// 领奖状态（0：未领取 1：已领取）
	required int32 rewardStat = 5;
	// 引导关卡id (0:表示未打引导关)
	required int32 guideId = 6;
	// 当日进入活动关卡的次数
	required int32 enterStageCnt = 7;
	// 是否有通行证(0.没有 1.有)
	optional int32 hasPass = 8;
	// 剩余打关次数
	optional int32 remainCnt = 9;
	// 已领取的普通累计奖励索引
	repeated int32 normalRewards = 10;
	// 已领取的通行证奖励索引
	repeated int32 passRewards = 11;
	// 闯关获得的宝箱数量
	optional int32 boxNum = 12;
	// 是否有排行榜奖励可以领取（0. 没有 1.有）
	optional int32 hasRankReward = 13;
}

// 购买满级活动闯关次数请求
message ActivityMaxedBuyStageRequest {
	// 满级活动id
	required string activityId = 1;
}

// 购买满级活动闯关次数响应
message ActivityMaxedBuyStageResponse {
	// 满级活动id
	required string activityId = 1;
	// 剩余闯关次数
	required int32 stageCnt = 2;
}

// 领取满级玩法奖励请求
message ActivityMaxedRecieveRewardRequest {
	// 活动id
	optional string activityId = 1;	
	// 奖励类型 0.普通奖励 1.通行证奖励
	optional int32 rewardType = 2;
	// 奖励索引
	optional int32 rewardIndex = 3;
}

// 领取满级玩法奖励响应
message ActivityMaxedRecieveRewardResponse {

}


// ***************等级活动******************

// 等级活动信息请求
message ActivityLevelRequest {
	// 等级活动id
	repeated string activityId = 1;
}

// 等级活动信息响应
message ActivityLevelResponse {
	// 等级活动信息列表
	repeated ActivityLevelInfo infos = 1;

	// 等级活动信息
	message ActivityLevelInfo {
		// 活动ID
		required string activityId = 1;
		// 活动累计开启次数(首次开启为1)
		required int32 openCount = 2;
		// 上次开启时间ms
		required int64 lastOpenTime = 3;
		// 上次结束时间ms
		required int64 lastCloseTime = 4;
		// 是否开启(如果false 后续字段不会有值)
		required bool open = 5;
		// 阶段参数
		optional int32 stepArgs = 6;
		// 已领取阶段
		repeated int32 receives = 7;	
	}
	
}

// 等级活动开启请求
message ActivityLevelOpenRequest {
	// 等级活动id
	required string activityId = 1;
}

// 等级活动开启响应
message ActivityLevelOpenResponse {
	
}

// 等级活动领取奖励请求 
message ActivityLevelReceiveRequest {
	// 等级活动id
	required string activityId = 1;
	// 阶段
	required int32 step = 2;
}

// 等级活动领取奖励响应
message ActivityLevelReceiveResponse {
	
}

// ---------------水晶球活动-----------------------------------------

// 水晶球活动信息请求
message ActivityCrystalRequest {
    // 活动id
    repeated string activityId = 1;
}

// 水晶球奖励领取信息
message CrystalReceiveInfo {
    // 奖励信息
    required int32 awardIndex = 1;
    // 领取次数
    required int32 num = 2;
}

 
// 水晶球活动信息
message ActivityCrystalInfo {
    // 活动ID
    required string activityId = 1;
    // 活动累计开启次数(首次开启为1)
    required int32 openCount = 2;
    // 上次开启时间ms
    required int64 lastOpenTime = 3;
    // 上次结束时间ms
    required int64 lastCloseTime = 4;
    // 是否开启(如果false 后续字段不会有值)
    required bool open = 5;
    // 已抽奖次数
    optional int32 receiveNum = 6;
    // 奖励领取信息
    repeated CrystalReceiveInfo receiveInfo = 7;
    // 乌鸦数
    optional int32 tickets = 8;
    // 建筑大奖是否已领取
    optional bool buildingPrizeReceived = 9;
}

// 水晶球活动信息响应
message ActivityCrystalResponse {
    // 水晶球活动信息列表
    repeated ActivityCrystalInfo infos = 1;
}
 
// 水晶球活动开启请求
message ActivityCrystalOpenRequest {
    // 活动id
    required string activityId = 1;
}
 
// 水晶球活动开启响应
message ActivityCrystalOpenResponse {
     
}
 
// 请求关闭水晶球活动请求
message ActivityCrystalCloseRequest {
    // 活动id
    required string activityId = 1;
}
 
// 请求关闭水晶球活动响应
message ActivityCrystalCloseResponse {
     
}
 
// 水晶球活动领取奖励请求
message ActivityCrystalReceiveRequest {
    // 活动id
    required string activityId = 1;
    // 奖励信息
    required int32 awardIndex = 2;
}
 
// 水晶球活动领取奖励响应
message ActivityCrystalReceiveResponse {
     
}

// 水晶球活动建筑大奖领取请求
message ActivityCrystalBuildingPrizeReceiveRequest {
	 // 活动id
    required string activityId = 1;
}

// 水晶球活动建筑大奖领取响应
message ActivityCrystalBuildingPrizeReceiveResponse {
	
}

// 小猪存钱罐信息请求
message PiggyBankInfoRequest {
	
}

// 小猪存钱罐信息响应
message PiggyBankInfoResponse {
	optional string lastBankId = 1; // 上次开启存钱罐ID
	optional int64 lastEndTime = 2; // 上次开启存钱罐结束时间ms
	optional bool lastRecharge = 3; // 上次是否购买
	optional string curBankId = 4; // 当前开启存钱罐ID
	optional int64 curStartTime = 5; // 开始时间ms
	optional int32 diamonds = 6; // 钻石数
	optional string curConfig = 7;	// 当前存钱罐配置json
}

// 触发小猪存钱罐请求
message PiggyBankStartRequest {
	required string bankId = 1; // 存钱罐ID
}

// 触发小猪存钱罐响应
message PiggyBankStartResponse {
	
}

// 结束小猪存钱罐请求
message PiggyBankEndRequest {
	required string bankId = 1; // 存钱罐ID
}

// 结束小猪存钱罐响应
message PiggyBankEndResponse {
	
}

//---------------------------巅峰魔法师活动-----------------------------

// 奖励信息   奖励信息复用了在父亲节活动中有用到
message RewardMsg {
	required string itemId = 1;
	required int32 num = 2;
}

// 排名信息
message RankUnitMsg {
	// 玩家id
	required string playerId = 1;
	// 排名
	optional int32 index = 2;
	// 分数
	optional int32 score = 3;
	// 名字
	optional string name = 4;
	// ICON
	optional string icon = 5;
	// fb account
	optional string account = 6;
	// 上次排名
	optional int32 lastIndex = 7;
	// 等级
	optional int32 level = 8;
	//是否为vip
	optional bool isVip = 9;
}

// 巅峰魔法师活动信息请求
message TopMagicianInfoRequest {
	// 活动id
    required string activityId = 1;
}

// 巅峰魔法师活动信息响应
message TopMagicianInfoResponse {
	// 活动信息
	required ActivityMsg activity = 1;
	// 可用免费打关次数
	required int32 freeCnt = 2;
	// 已购买打关次数
	required int32 buyCnt = 3;
	// 分数
	required int32 scoreNum = 4;
	// 领奖状态（0：未领取 1：已领取 2:没有可领取奖励）
	required int32 rewardStat = 5;
	// 当日进入活动关卡的次数
	required int32 enterStageCnt = 7;
	// 剩余打关次数
	optional int32 remainCnt = 9;
	// 已领取里程碑奖励ids(RankingMilestoneConfigTemplate#id)
	repeated string milestoneIds = 10;
	// 活动是否已结算
	optional bool rankEnd = 11;
	// 分榜标识mark
	optional int32 mark = 12;
}

// 购买巅峰魔法师活动闯关次数请求
message TopMagicianBuyStageRequest {
	// 活动id
	required string activityId = 1;
}

// 购买巅峰魔法师活动闯关次数响应
message TopMagicianBuyStageResponse {
	// 满级活动id
	required string activityId = 1;
	// 剩余闯关次数
	required int32 stageCnt = 2;
}

// 领取巅峰魔法师活动里程碑奖励请求
message TopMagicianMilestoneRequest {
	// 活动id
	required string activityId = 1;
	// 里程碑id
	required string milestoneId = 2;
}

// 领取巅峰魔法师活动里程碑奖励响应
message TopMagicianMilestoneResponse {

}

// 活动排行榜信息请求
message RankingListRequest {
	// 活动id
	required string activityId = 1;
}

// 活动排行榜信息返回
message RankingListResponse {
	// 活动id
	required string activityId = 1;
	// 排名信息
	repeated RankUnitMsg rankUnits = 2; 
	// 我的排名
	optional RankUnitMsg myRank = 3;
	// 奖励状态
	optional int32 rewardState = 4;
}

// 活动排行榜奖励领取请求
message RankingListRewardRequest {
	// 活动id
	required string activityId = 1;
}

// 活动排行榜奖励领取响应
message RankingListRewardResponse {
	// 活动id
	required string activityId = 1;
	// 奖励信息
	repeated RewardMsg rewards = 2;
}

// ******************** 樱花礼包 **********************

// 樱花礼包
message SakuraGiftMsg {
	// 礼包配置id
	optional string giftId = 1;
	// 已购买次数
	optional int32 buyCnt = 2;
}

// 樱花礼包活动信息请求（请求活动用12002协议）
message SakuraGiftInfoRequest {
	// 活动id
	optional string activityId = 1;	
}

// 樱花礼包活动信息请求
message SakuraGiftInfoResponse {
	// 活动信息
	optional ActivityMsg sakuraGiftInfo = 1;
	// 今日已购买的樱花礼包
	repeated SakuraGiftMsg sakuraGifts = 2;
	// 扭蛋机已抽中的奖励配置id
	repeated string capsuleToys = 3;
	// 樱花道具数量
	optional int32 sakuraNum = 4;
}

// 樱花礼包活动扭蛋机请求
message SakuraGiftCapsuleToysRequest {
	// 活动id
	optional string activityId = 1;
	// 扭蛋机抽出的奖励配置id
	optional string rewardId = 2;
}

// 樱花礼包活动扭响应
message SakuraGiftCapsuleToysResponse {

}

// 樱花礼包活动结束后樱花兑换成道具请求
message SakuraGiftConvertItemRequest {

}

// 樱花礼包活动结束后樱花兑换成道具响应
message SakuraGiftConvertItemResponse {
	
}

// 引导时奖励樱花请求
message SakuraGiftRewardRequest {
	// 活动id
	optional string activityId = 1;
}

// 引导时奖励樱花响应
message SakuraGiftRewardResponse {

}

// ************************* 符石加倍 **************************

// 符石加倍活动信息请求（请求活动用12002协议）
message DoubleRunesInfoRequest {
	// 活动id
	optional string activityId = 1;
}

// 符石加倍活动信息响应
message DoubleRunesInfoResponse {
	// 活动信息
	optional ActivityMsg doubleRunesInfo = 1;
	// 加倍buff开始时间
	optional int64 buffStartTime = 2;
	// 加倍buff结束时间
	optional int64 buffEndTime = 3;
	// 当前倍数
	optional int32 curTimes = 4;
	// 活动类型（1. 主线活动 2.支线活动）
	optional int32 activityType = 5;
	// 活动cd结束时间戳
	optional int64 activityCD = 6;
	// 活动开启次数
	optional int32 actOpenCnt = 7;
}

// 请求开启符石加倍buff
message DoubleRunesOpenBuffRequest {
	// 活动id
	optional string activityId = 1;
}

// 开启符石加倍buff响应
message DoubleRunesOpenBuffResponse {

}

// *************************** 文森特的奖杯 ****************************

// 文森特的奖杯活动信息请求（请求活动用12002协议）
message VincentsTrophyInfoRequest {
	// 活动id
	optional string activityId = 1;
}

// 文森特的奖杯活动信息响应
message VincentsTrophyInfoResponse {
	// 活动信息
	optional ActivityMsg vincentsTrophyInfo = 1;
	// 单日奖牌数量
	optional int32 trophies = 2;
	// 已领取的奖牌奖励索引
	repeated int32 rewards = 3;
	// 上次startLevel的关卡id
	optional int32 levelId = 4;
	// 活动类型（1. 主线活动 2.支线活动）
	optional int32 activityType = 5;
	// 活动cd结束时间戳
	optional int64 activityCD = 6;
	// 活动开启次数
	optional int32 actOpenCnt = 7;
	// 定档顶级
	optional int32 openLevel = 8;
}

// 开启活动请求（文森特的奖杯，符石活动）
message OpenNewActivityRequest {
	// 活动id
	optional string activityId = 1;
	// 活动类型（1. 主线活动 2.支线活动）
	optional int32 activityType = 2;
	// 活动cd (单位：h)
	optional int32 activityCD = 3;
}

// 开启活动响应（文森特的奖杯，符石活动）
message OpenNewActivityResponse {

}

//*************************父亲节活动开始*************************
// 请求父亲节信息
message ActivityFatherDayRequest {
	// 活动id
	required string activityId = 1;
}

//每一步随机的关卡数据
message RandomStepLevelMsg {
	//活动的步数
	required int32 step = 1;
	//已经随机到的关卡集合（服务器会记录客户端随机值，在随机满所有后会清理数据）
	repeated int32 levels = 2;
}

// 父亲节信息响应
message ActivityFatherDayResponse {
	// 活动信息
	required ActivityMsg activity = 1;
	// 可用免费打关轮数
	required int32 freeCnt = 2;
	// 已购买打关轮数
	required int32 buyCnt = 3;
	// 是否有通关奖励可领取（0：没有 1：有）
	required int32 rewardState = 4;
	// 引导关卡id (0:表示未打引导关)
	required int32 guideId = 5;
	// 可用打关轮数（仅购买途径获取的）
	required int32 remainCnt = 6;
	// 获得的用于排行的数量(信封)
	required int32 rankScore = 7;
	// 是否有排行榜奖励可以领取（0. 没有 1.有 2.已领过）
	required int32 rankReward = 8;
	//当前完成的步数 默认为0 没有完成任何一步
	required int32 finishStep = 9;
	//完成的轮数
	required int32 rounds = 10;
	//累计的奖励
	repeated RewardMsg rewards = 11;
	//随机关卡统计
	repeated RandomStepLevelMsg randomStepLevels = 12;
	//本轮开始时间 单位:毫秒 (打第一关的时间 用来计算失败或完成是否减次数)
	required int64 roundStartTime = 13;
	//累计的当前命数(票数)标识 BI用来识别各个步数所属的命数 (初始值为0 在开始第一关的时候服务器++)
	optional int32 lifes = 14;
	//分榜标识mark
	optional int32 mark = 15;
}

// 购买父亲节轮数请求
message ActivityFatherDayBuyRoundRequest {
	// 活动id
	required string activityId = 1;
}

// 购买父亲节轮数响应
message ActivityFatherDayBuyRoundResponse {
	// 父亲节活动id
	required string activityId = 1;
	// 剩余闯关次数
	required int32 stageCnt = 2;
}

// 领取父亲节活动奖励请求（目前就是通关奖励）
message ActivityFatherDayRewardRequest {
	// 活动id
	required string activityId = 1;

}

//  领取父亲节活动奖励响应
message ActivityFatherDayRewardResponse {

}
//*************************父亲节活动结束*************************
