syntax = "proto2";
package com.common.msg;
enum TaskModuleMsgSubCommand {
	//提交任务
	TASKMODULEMSG_SUB_SUBMITTASK = 10001;
	//任务列表请求
	TASKMODULEMSG_SUB_TASKLIST = 10002;
	//请求用钻石完成任务条件
	TASKMODULEMSG_SUB_FINISHTASKCONDITION = 10003;
	//GM finish task  跳任务进度
	TASKMODULEMSG_SUB_GMSUBMITTASK = 10004;
}


//任务列表请求
message TaskListRequest {
}
enum ProtoTypeEnum{
	PROTO_TYPE_INT32 = 0;
	PROTO_TYPE_STRING = 1;
}

message ProtoTypes{
	//0:int32  1:string  有其他类型时继续适配
	required int32 typeId = 1;
	//具体的数据 对于数值使用8bit little-endian编码方式
	required bytes datas = 2;
}

message TaskConditionMsg{
	//条件在任务中的索引值,从0开始( 有些条件无需传递参数因此需要index指定条件如建筑达到相应等级 采集地图上指定的资源（无指定资源即为完成）等等)
	required int32 indexId = 1;
	//条件参数
	repeated ProtoTypes  params = 2;
}

message TaskMsg{
	//任务配置id
	required string  taskId = 1;
	//任务状态 1：已接取 2：已完成 3: 已经提交
	required int32 state = 2;
	//对于已完成和已提交的任务服务器不会在提供条件信息
	repeated TaskConditionMsg conditions = 3; 
}

message TaskGraphMsg {
	//任务图配置id
	required string  graphId = 1;
	//任务图状态 0:开启(默认开启)  1:关闭(可能是完成了任务图或其他原因关闭了任务图)
	required int32 state = 2;
	//任务信息
	repeated TaskMsg tasks = 3;
}

//任务列表响应
message TaskListResponse {
	//多个任务图信息
	repeated TaskGraphMsg graphs = 1;
}


//提交任务请求
message SubmitTaskRequest {
	//任务id
	required string taskId = 1;
	//任务图配置id
	required string graphId = 2;
}

//提交任务响应
message SubmitTaskResponse {

}

//请求用钻石完成任务条件
message FinishTaskConditionRequest {
	//任务图配置id
	required string  graphId = 1;
	//任务配置id
	required string  taskId = 2;
	//任务条件索引
	required int32  conIndex = 3;
	//需要钻石数量
	required int32  diamonds = 4;
}

//用钻石完成任务条件响应
message FinishTaskConditionResponse {
}

// 跳任务进度 完成到该任务(包含任务)
message GMSubmitTaskRequest {
	//任务图配置id
	required string  graphId = 1;
	//任务配置id
	required string  taskId = 2;
}

//跳任务进度 完成到该任务(包含任务)响应
message GMSubmitTaskResponse {
}


